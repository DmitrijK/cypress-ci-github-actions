{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-03-27T11:13:38.727Z",
    "end": "2024-03-27T11:13:42.192Z",
    "duration": 3465
  },
  "results": [
    {
      "uuid": "18bcfc3e-3acd-4bc6-a4eb-4a9fc320190e",
      "title": "",
      "fullFile": "cypress\\e2e\\todo.cy.ts",
      "file": "cypress\\e2e\\todo.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "70384e0f-c716-46b8-b692-848d2c6ac798",
          "title": "example to-do app",
          "fullFile": "cypress\\e2e\\todo.cy.ts",
          "file": "cypress\\e2e\\todo.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 356,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "a45d9294-634d-49ab-9d83-1bbce6fa5ac0",
              "parentUUID": "70384e0f-c716-46b8-b692-848d2c6ac798",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 408,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat';\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "afdb41e5-43ca-469a-9d98-4d24f32c0613",
              "parentUUID": "70384e0f-c716-46b8-b692-848d2c6ac798",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 184,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "02cf14df-8230-4d4c-b405-638e36f65d40",
              "parentUUID": "70384e0f-c716-46b8-b692-848d2c6ac798",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a13c28ba-461f-4417-a8bd-0ebda3980ab1",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 261,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "682231eb-0f8b-43ff-83ec-461caf6cd992",
                  "parentUUID": "a13c28ba-461f-4417-a8bd-0ebda3980ab1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 259,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "430096bf-dc24-4e84-adf1-1cc1d7677a32",
                  "parentUUID": "a13c28ba-461f-4417-a8bd-0ebda3980ab1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 251,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "e7be2b0e-c75e-4676-a21e-37d5a54acdc7",
                  "parentUUID": "a13c28ba-461f-4417-a8bd-0ebda3980ab1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "682231eb-0f8b-43ff-83ec-461caf6cd992",
                "430096bf-dc24-4e84-adf1-1cc1d7677a32",
                "e7be2b0e-c75e-4676-a21e-37d5a54acdc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 771,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "a45d9294-634d-49ab-9d83-1bbce6fa5ac0",
            "afdb41e5-43ca-469a-9d98-4d24f32c0613",
            "02cf14df-8230-4d4c-b405-638e36f65d40"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 948,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[name].html",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "charts": true,
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "saveAllAttempts": false,
        "overwrite": false,
        "reportDir": "cypress\\reports\\.jsons",
        "reportFilename": "[name].html",
        "saveJson": true,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}